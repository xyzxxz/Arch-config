(undo-tree-save-format-version . 1)
"4f1d001f5606e9e46685431cd695c368093d3cc4"
[nil nil nil nil (26416 25512 925013 676000) 0 nil]
([nil nil ((119 . 128) (#("s" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -119) (undo-tree-id154 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -120) (undo-tree-id155 . -1) (#("r" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -121) (undo-tree-id156 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -122) (undo-tree-id157 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -123) (undo-tree-id158 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -124) (undo-tree-id159 . -1) (#("_" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -125) (undo-tree-id160 . -1) (#("v" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -126) (undo-tree-id161 . -1) (#("a" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -127) (undo-tree-id162 . -1) (#("l" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -128) (undo-tree-id163 . -1) (#("u" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -129) (undo-tree-id164 . -1) (#("e" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -130) (undo-tree-id165 . -1) 131 (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -112) (undo-tree-id166 . -1) (undo-tree-id167 . -1) 113 (112 . 113) (#("c" 0 1 (face tree-sitter-hl-face:string fontified t)) . -812) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (#("t" 0 1 (face tree-sitter-hl-face:string fontified t)) . -813) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -814) (undo-tree-id172 . -1) (undo-tree-id173 . -1) 815 (802 . 815) (#("br" 0 2 (face tree-sitter-hl-face:string fontified t)) . -802) (undo-tree-id174 . -2) (undo-tree-id175 . -2) 804 (802 . 804) (#("r" 0 1 (face tree-sitter-hl-face:string fontified t)) . -802) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("b" 0 1 (face tree-sitter-hl-face:string fontified t)) . -803) (undo-tree-id178 . -1) (undo-tree-id179 . -1) 804 (801 . 804) (795 . 800) (#("va" 0 2 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -795) (undo-tree-id180 . -2) (undo-tree-id181 . -2) 797 (795 . 797) (794 . 795) (#("P" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -794) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -795) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (#("t" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -796) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (#("h" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -797) (undo-tree-id188 . -1) (undo-tree-id189 . -1) 798 (788 . 798) (#("sc" 0 2 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -788) (undo-tree-id190 . -2) (undo-tree-id191 . -2) 790 (788 . 790) (785 . 789) (776 . 785) (#("bac" 0 3 (face tree-sitter-hl-face:string fontified t)) . -776) (undo-tree-id192 . -3) (undo-tree-id193 . -3) 779 (776 . 779) (775 . 776) (770 . 775) (#("cl" 0 2 (face tree-sitter-hl-face:string fontified t)) . -770) (undo-tree-id194 . -2) (undo-tree-id195 . -2) 772 (765 . 772) (764 . 766) (#("`" 0 1 (fontified nil)) . -764) (757 . 765) (751 . 757) (#("sc" 0 2 (face tree-sitter-hl-face:variable fontified t)) . -751) (undo-tree-id196 . -2) (undo-tree-id197 . -2) 753 (745 . 753) (744 . 745) (#("	" 0 1 (fontified nil)) . 743) (undo-tree-id198 . -1) (742 . 745) (#(")" 0 1 (fontified nil)) . -741) (741 . 742) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -741) (741 . 742) (735 . 742) (734 . 735) (733 . 739) (731 . 734) (#(")" 0 1 (fontified nil)) . -730) (730 . 731) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -730) (730 . 731) (729 . 731) (#("
" 0 1 (fontified t)) . -729) (undo-tree-id199 . -1) (#(" " 0 1 (fontified t)) . -730) (undo-tree-id200 . -1) (#(" " 0 1 (fontified t)) . -731) (undo-tree-id201 . -1) (#(" " 0 1 (fontified t)) . -732) (undo-tree-id202 . -1) (#(" " 0 1 (fontified t)) . -733) (undo-tree-id203 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -734) (undo-tree-id204 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -735) (undo-tree-id205 . -1) (#(" " 0 1 (fontified t)) . -736) (undo-tree-id206 . -1) 737 (#("{" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -737) (undo-tree-id207 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 738) (736 . 739) (#(")" 0 1 (fontified nil)) . -735) (735 . 736) (#(")" 0 1 (fontified nil)) . -735) (735 . 736) (734 . 736) (730 . 734) (#(" " 0 1 (fontified nil)) . 729) (undo-tree-id208 . -1) (730 . 731) (718 . 730) (714 . 718) (#("    " 0 4 (fontified nil)) . 713) (undo-tree-id209 . -4) (712 . 718) (695 . 700) (#("val" 0 3 (face tree-sitter-hl-face:string fontified t)) . -695) (undo-tree-id210 . -3) (undo-tree-id211 . -3) 698 (695 . 698) (694 . 695) (#("-" 0 1 (face tree-sitter-hl-face:string fontified t)) . -694) (undo-tree-id212 . -1) 695 (694 . 695) (#("_" 0 1 (face tree-sitter-hl-face:string fontified t)) . -694) (undo-tree-id213 . -1) 695 (694 . 695) (688 . 694) (#("sc" 0 2 (face tree-sitter-hl-face:string fontified t)) . -688) (undo-tree-id214 . -2) (undo-tree-id215 . -2) 690 (688 . 690) (687 . 689) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -687) (687 . 688) (679 . 688) (678 . 679) (#("," 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t)) . -678) (undo-tree-id216 . -1) 679 (678 . 679) (674 . 678) (#("thi" 0 3 (fontified t)) . -674) (undo-tree-id217 . -3) (undo-tree-id218 . -3) 677 (674 . 677) (668 . 674) (661 . 668) (#("per" 0 3 (fontified t)) . -661) (undo-tree-id219 . -3) (undo-tree-id220 . -3) 664 (658 . 664) (653 . 658) (#("val" 0 3 (fontified t)) . -653) (undo-tree-id221 . -3) (undo-tree-id222 . -3) 656 (652 . 656) (646 . 652) (#("sc" 0 2 (fontified t)) . -646) (undo-tree-id223 . -2) (undo-tree-id224 . -2) 648 (640 . 648) (635 . 640) (634 . 637) (629 . 635) (#(")" 0 1 (fontified nil)) . -628) (628 . 629) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -628) (628 . 629) (627 . 629) (#(")" 0 1 (fontified nil)) . -627) (627 . 628) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -627) (627 . 628) (621 . 628) (617 . 619) (615 . 617) (611 . 613) (#("9" 0 1 (face (tree-sitter-hl-face:number tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -611) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (#("9" 0 1 (face (tree-sitter-hl-face:number tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -612) (undo-tree-id227 . -1) 613 (610 . 613) (#("0" 0 1 (face (tree-sitter-hl-face:number tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -610) (undo-tree-id228 . -1) (#("1" 0 1 (face (tree-sitter-hl-face:number tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -611) (undo-tree-id229 . -1) 612 (607 . 612) (600 . 607) (#("per" 0 3 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -600) (undo-tree-id230 . -3) (undo-tree-id231 . -3) 603 (600 . 603) (591 . 601) (#("
" 0 1 (face tree-sitter-hl-face:string fontified t)) . -591) (undo-tree-id232 . -1) 592 (591 . 592) (589 . 591) (582 . 590) (569 . 582) (#("brightnessc" 0 11 (face tree-sitter-hl-face:string fontified t)) . -569) (undo-tree-id233 . -11) (undo-tree-id234 . -11) 580 (579 . 580) (569 . 579) (#("br" 0 2 (face tree-sitter-hl-face:string fontified t)) . -569) (undo-tree-id235 . -2) (undo-tree-id236 . -2) 571 (570 . 571) (569 . 570) (568 . 570) (#("`" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -568) (568 . 569) (565 . 569) (563 . 565) (555 . 560) (548 . 555) (#("per" 0 3 (fontified t)) . -548) (undo-tree-id237 . -3) (undo-tree-id238 . -3) 551 (548 . 551) (543 . 548) (542 . 545) (540 . 543) (538 . 539) (#("0" 0 1 (face tree-sitter-hl-face:number fontified t)) . -538) (undo-tree-id239 . -1) 539 (535 . 539) (528 . 535) (#("p" 0 1 (fontified t)) . -528) (undo-tree-id240 . -1) (undo-tree-id241 . -1) 529 (528 . 529) (524 . 529) (522 . 524) (472 . 479) (#("pe" 0 2 (face tree-sitter-hl-face:variable.parameter fontified t)) . -472) (undo-tree-id242 . -2) (undo-tree-id243 . -2) 474 (472 . 474) (#("s" 0 1 (face tree-sitter-hl-face:variable.parameter fontified t)) . -472) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (#("c" 0 1 (face tree-sitter-hl-face:variable.parameter fontified t)) . -473) (undo-tree-id246 . -1) (undo-tree-id247 . -1) 474 (472 . 474) (508 . 512) (501 . 508) (#("per" 0 3 (fontified t)) . -501) (undo-tree-id248 . -3) (undo-tree-id249 . -3) 504 (501 . 504) (apply yas--snippet-revive 477 504 #s(yas--snippet nil (#s(yas--field 1 481 492 nil nil nil t #s(yas--exit 501 nil))) #s(yas--exit 501 nil) 2 nil #s(yas--field 1 481 492 nil nil nil t #s(yas--exit 501 nil)) nil nil)) (484 . 492) (#("v" 0 1 (fontified t)) . -484) (undo-tree-id250 . -1) (#("e" 0 1 (fontified t)) . -485) (undo-tree-id251 . -1) 486 (482 . 486) (#("condition" 0 9 (fontified nil)) . 482) (481 . 482) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 481 492 nil nil nil t #s(yas--exit 501 nil))) #s(yas--exit 501 nil) 2 nil #s(yas--field 1 481 492 nil nil nil t #s(yas--exit 501 nil)) nil nil)) (500 . 501) (494 . 499) (#("  " 0 2 (fontified nil)) . 494) (477 . 498) (#("if" 0 2 (face tree-sitter-hl-face:keyword fontified t)) . 477) (undo-tree-id252 . -2) (undo-tree-id253 . -2) 479 (477 . 479) (476 . 477) (475 . 481) (473 . 476) (#(")" 0 1 (fontified nil)) . -472) (472 . 473) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -472) (472 . 473) (471 . 473) (#(" " 0 1 (fontified t)) . -471) (undo-tree-id254 . -1) (#("(" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -472) (undo-tree-id255 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -473) (undo-tree-id256 . -1) 474 (#(")" 0 1 (fontified nil)) . -473) (473 . 474) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -473) (473 . 474) (471 . 474) (466 . 471) (#("va" 0 2 (fontified t)) . -466) (undo-tree-id257 . -2) (undo-tree-id258 . -2) 468 (465 . 468) (459 . 465) (#("sc" 0 2 (fontified t)) . -459) (undo-tree-id259 . -2) (undo-tree-id260 . -2) 461 (456 . 461) (455 . 456) (451 . 455) (#("    " 0 4 (fontified nil)) . 450) (undo-tree-id261 . -4) (449 . 455) (438 . 443) (#("va" 0 2 (fontified t)) . -438) (undo-tree-id262 . -2) (undo-tree-id263 . -2) 440 (437 . 440) (431 . 437) (#("sc" 0 2 (fontified t)) . -431) (undo-tree-id264 . -2) (undo-tree-id265 . -2) 433 (425 . 433) (421 . 425) (#("
" 0 1 (fontified t)) . -421) (undo-tree-id266 . -1) (#("	" 0 1 (fontified t)) . -422) (undo-tree-id267 . -1) 423 (421 . 423) (418 . 421) (417 . 418) (416 . 422) (414 . 417) (#(")" 0 1 (fontified nil)) . -413) (413 . 414) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -413) (413 . 414) (412 . 414) (407 . 412) (#("val" 0 3 (fontified t)) . -407) (undo-tree-id268 . -3) (undo-tree-id269 . -3) 410 (406 . 410) (400 . 406) (#("sc" 0 2 (fontified t)) . -400) (undo-tree-id270 . -2) (undo-tree-id271 . -2) 402 (397 . 402) (396 . 397) (392 . 396) (#("    " 0 4 (fontified nil)) . 391) (undo-tree-id272 . -4) (390 . 396) (384 . 389) (379 . 382) (378 . 380) (#("\"" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -378) (378 . 379) (374 . 379) (373 . 375) (371 . 373) (#("\\" 0 1 (fontified t)) . -371) (undo-tree-id273 . -1) 372 (370 . 372) (365 . 368) (364 . 366) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -364) (364 . 365) (#("g" 0 1 (fontified t)) . -364) (undo-tree-id274 . -1) 365 (364 . 365) (357 . 365) (353 . 357) (#("v" 0 1 (fontified t)) . -353) (undo-tree-id275 . -1) (undo-tree-id276 . -1) 354 (351 . 354) (#("M" 0 1 (fontified t)) . -351) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#("a" 0 1 (fontified t)) . -352) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (#("x" 0 1 (fontified t)) . -353) (undo-tree-id281 . -1) (undo-tree-id282 . -1) 354 (345 . 354) (#("sc" 0 2 (fontified t)) . -345) (undo-tree-id283 . -2) (undo-tree-id284 . -2) 347 (344 . 347) (339 . 344) (334 . 337) (333 . 335) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -333) (333 . 334) (323 . 334) (317 . 323) (#("sc" 0 2 (fontified t)) . -317) (undo-tree-id285 . -2) (undo-tree-id286 . -2) 319 (316 . 319) (312 . 316) (#("    " 0 4 (fontified nil)) . 311) (undo-tree-id287 . -4) (310 . 316) (183 . 184) (182 . 183) (#("`" 0 1 (face tree-sitter-hl-face:number fontified nil)) . -182) (172 . 183) (#("/" 0 1 (fontified t)) . -172) (undo-tree-id288 . -1) (undo-tree-id289 . -1) 173 (#("`" 0 1 (face tree-sitter-hl-face:string fontified nil)) . 173) (163 . 173) (#("ba" 0 2 (face tree-sitter-hl-face:string fontified t)) . -163) (undo-tree-id290 . -2) (undo-tree-id291 . -2) 165 (162 . 165) (157 . 162) (#("cl" 0 2 (face tree-sitter-hl-face:string fontified t)) . -157) (undo-tree-id292 . -2) (undo-tree-id293 . -2) 159 (150 . 159) (#("l" 0 1 (face tree-sitter-hl-face:string fontified t)) . -150) (undo-tree-id294 . -1) (undo-tree-id295 . -1) 151 (149 . 151) (146 . 149) (145 . 146) (144 . 146) (#("`" 0 1 (fontified nil)) . -144) (125 . 145) (119 . 125) (#("sc" 0 2 (face tree-sitter-hl-face:variable fontified t)) . -119) (undo-tree-id296 . -2) (undo-tree-id297 . -2) 121 (119 . 121) (115 . 119) (#("s" 0 1 (fontified t)) . -115) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (#("n" 0 1 (fontified t)) . -116) (undo-tree-id300 . -1) (#("t" 0 1 (fontified t)) . -117) (undo-tree-id301 . -1) (#(" " 0 1 (fontified t)) . -118) (undo-tree-id302 . -1) 119 (113 . 119) (#("
" 0 1 (fontified t)) . -113) (undo-tree-id303 . -1) 114 (112 . 114) (104 . 108) (102 . 105) (98 . 102) (88 . 98) (#("br" 0 2 (face tree-sitter-hl-face:string fontified t)) . -88) (undo-tree-id304 . -2) (undo-tree-id305 . -2) 90 (88 . 90) (87 . 89) (#("`" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -87) (87 . 88) (81 . 88) (76 . 81) (#("U" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -76) (undo-tree-id306 . -1) (undo-tree-id307 . -1) 77 (76 . 77) (75 . 77) (69 . 75) (#("Num" 0 3 (face tree-sitter-hl-face:constructor fontified t)) . -69) (undo-tree-id308 . -3) (undo-tree-id309 . -3) 72 (69 . 72) (65 . 69) (59 . 64) (#("r" 0 1 (face tree-sitter-hl-face:type fontified t)) . -59) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("t" 0 1 (face tree-sitter-hl-face:type fontified t)) . -60) (undo-tree-id312 . -1) 61 (60 . 61) (52 . 60) (39 . 53) (32 . 37) (#("util" 0 4 (face tree-sitter-hl-face:string fontified t)) . -32) (undo-tree-id313 . -4) (undo-tree-id314 . -4) 36 (31 . 36) (27 . 31) (#("li" 0 2 (face tree-sitter-hl-face:string fontified t)) . -27) (undo-tree-id315 . -2) (undo-tree-id316 . -2) 29 (27 . 29) (26 . 28) (#("\"" 0 1 (fontified nil)) . -26) (20 . 27) (9 . 19) (1 . 10) (114 . 116) (113 . 115) (#("\"" 0 1 (fontified nil)) . -113) (111 . 114) (105 . 110) (104 . 106) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -104) (104 . 105) (103 . 105) (#("{" 0 1 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -103) (undo-tree-id317 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 104) (101 . 105) (98 . 100) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -98) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (#("u" 0 1 (face tree-sitter-hl-face:string fontified t)) . -99) (undo-tree-id320 . -1) 100 (88 . 100) (87 . 89) (#("\"" 0 1 (fontified nil)) . -87) (87 . 88) (82 . 87) (81 . 84) (78 . 82) (#("}" 0 1 (fontified nil)) . -77) (77 . 78) (#("}" 0 1 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -77) (77 . 78) (70 . 78) (60 . 71) (53 . 60) (#("Ser" 0 3 (face tree-sitter-hl-face:constructor fontified t)) . -53) (undo-tree-id321 . -3) (undo-tree-id322 . -3) 56 (53 . 56) (52 . 53) (51 . 57) (43 . 52) (66 . 76) (#("B" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -66) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 67 (61 . 67) (54 . 61) (#("def" 0 3 (fontified t)) . -54) (undo-tree-id325 . -3) (undo-tree-id326 . -3) 57 (53 . 57) (47 . 53) (#("expo" 0 4 (fontified t)) . -47) (undo-tree-id327 . -4) (undo-tree-id328 . -4) 51 (47 . 51) (45 . 47) (39 . 43) (38 . 40) (29 . 39) (27 . 29) (#(" " 0 1 (fontified t)) . -27) (undo-tree-id329 . -1) 28 (9 . 28) (4 . 9) (#("clas" 0 4 (fontified t)) . -4) (undo-tree-id330 . -4) (undo-tree-id331 . -4) 8 (4 . 8) (1 . 4) (#("c" 0 1 (fontified t)) . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (#("l" 0 1 (fontified t)) . -2) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#("a" 0 1 (fontified t)) . -3) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("s" 0 1 (fontified t)) . -4) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (#("s" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -5) (undo-tree-id340 . -1) (undo-tree-id341 . -1) 6 (1 . 6) (#("clas" 0 4 (fontified t)) . -1) (undo-tree-id342 . -4) (undo-tree-id343 . -4) 5 (1 . 5) (t . -1)) nil (26416 25512 924985 5000) 0 nil])
([nil nil ((#("const interface = await bash`ls -w1 /sys/class/backlight | head -1`
" 0 5 (face tree-sitter-hl-face:keyword fontified t) 5 6 (fontified t) 6 15 (face tree-sitter-hl-face:variable fontified t) 15 16 (fontified t) 16 17 (face tree-sitter-hl-face:operator fontified t) 17 18 (fontified t) 18 23 (face tree-sitter-hl-face:keyword fontified t) 23 24 (fontified t) 24 28 (face tree-sitter-hl-face:function.call fontified t) 28 32 (face tree-sitter-hl-face:string fontified t) 32 33 (face tree-sitter-hl-face:string fontified t) 33 41 (face tree-sitter-hl-face:string fontified t) 41 46 (face tree-sitter-hl-face:string fontified t) 46 47 (face tree-sitter-hl-face:string fontified t) 47 64 (face tree-sitter-hl-face:string fontified t) 64 65 (face tree-sitter-hl-face:string fontified t) 65 66 (face tree-sitter-hl-face:string fontified t) 66 67 (face tree-sitter-hl-face:string fontified t) 67 68 (fontified t)) . 113) (undo-tree-id150 . 53) (undo-tree-id151 . -9) (undo-tree-id152 . -14) (undo-tree-id153 . -67) 127) nil (26416 25512 924860 906000) 0 nil])
([nil nil ((nil rear-nonsticky nil 239 . 240) (#("
" 0 1 (fontified nil)) . -307) (239 . 308) 234) nil (26416 25512 924857 983000) 0 nil])
([nil nil ((1143 . 1151) (#("ca" 0 2 (fontified t)) . -1143) (undo-tree-id0 . -2) (undo-tree-id1 . -2) (undo-tree-id2 . -2) 1145 (1141 . 1145) (1136 . 1141) (#("eve" 0 3 (fontified t)) . -1136) (undo-tree-id3 . -3) (undo-tree-id4 . -3) 1139 (1136 . 1139) (1135 . 1137) (1128 . 1135) (#("con" 0 3 (face tree-sitter-hl-face:property fontified t)) . -1128) (undo-tree-id5 . -3) (undo-tree-id6 . -3) 1131 (1127 . 1131) (1122 . 1127) (#("su" 0 2 (fontified t)) . -1122) (undo-tree-id7 . -2) (undo-tree-id8 . -2) 1124 (1121 . 1124) (1115 . 1121) (#("ret" 0 3 (fontified t)) . -1115) (undo-tree-id9 . -3) (undo-tree-id10 . -3) 1118 (1115 . 1118) (1114 . 1115) (1113 . 1119) (1111 . 1114) (1100 . 1110) (1092 . 1099) (#("chan" 0 4 (face tree-sitter-hl-face:string fontified t)) . -1092) (undo-tree-id11 . -4) (undo-tree-id12 . -4) 1096 (1091 . 1096) (1085 . 1091) (#("sc" 0 2 (face tree-sitter-hl-face:string fontified t)) . -1085) (undo-tree-id13 . -2) (undo-tree-id14 . -2) 1087 (1085 . 1087) (1084 . 1086) (#("'" 0 1 (fontified nil)) . -1084) (1076 . 1085) (1068 . 1077) (1064 . 1068) (#("    " 0 4 (fontified nil)) . 1063) (undo-tree-id15 . -4) (1062 . 1068) (214 . 219) (#("fl" 0 2 (face tree-sitter-hl-face:string fontified t)) . -214) (undo-tree-id16 . -2) (undo-tree-id17 . -2) 216 (214 . 216) (213 . 215) (#("'" 0 1 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -213) (213 . 214) (211 . 214) (#("[" 0 1 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -211) (undo-tree-id18 . -1) (#("]" 0 1 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 212) (211 . 213) (#(" " 0 1 (fontified t)) . -211) (undo-tree-id19 . -1) 212 (#("'" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -212) (undo-tree-id20 . -1) (#("'" 0 1 (face tree-sitter-hl-face:string fontified t)) . 213) (#("[" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -213) (undo-tree-id21 . -1) (#("]" 0 1 (face tree-sitter-hl-face:string fontified t)) . 214) (213 . 215) (212 . 214) (#("'" 0 1 (fontified nil)) . -212) (211 . 213) (210 . 211) (202 . 209) (#("chang" 0 5 (face tree-sitter-hl-face:string fontified t)) . -202) (undo-tree-id22 . -5) (undo-tree-id23 . -5) 207 (201 . 207) (195 . 201) (#("sc" 0 2 (face tree-sitter-hl-face:string fontified t)) . -195) (undo-tree-id24 . -2) (undo-tree-id25 . -2) 197 (195 . 197) (194 . 196) (#("'" 0 1 (fontified nil)) . -194) (194 . 195) (#("s" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -194) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("c" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -195) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 196 (194 . 196) (#("'" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -188) (undo-tree-id30 . -1) (#("'" 0 1 (face tree-sitter-hl-face:string fontified t)) . 189) (188 . 190) (#("'" 0 1 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -188) (188 . 189) (189 . 194) (188 . 191) (1015 . 1020) (#("va" 0 2 (fontified t)) . -1015) (undo-tree-id31 . -2) (undo-tree-id32 . -2) 1017 (1014 . 1017) (1008 . 1014) (#("sc" 0 2 (fontified t)) . -1008) (undo-tree-id33 . -2) (undo-tree-id34 . -2) 1010 (1007 . 1010) (#("@" 0 1 (fontified t)) . -1007) (undo-tree-id35 . -1) 1008 (1002 . 1008) (#("#" 0 1 (fontified t)) . -1002) (undo-tree-id36 . -1) 1003 (1000 . 1003) (991 . 999) (985 . 991) (#("sc" 0 2 (face tree-sitter-hl-face:string fontified t)) . -985) (undo-tree-id37 . -2) (undo-tree-id38 . -2) 987 (985 . 987) (984 . 986) (#("'" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -984) (984 . 985) (978 . 985) (974 . 978) (#("thi" 0 3 (fontified t)) . -974) (undo-tree-id39 . -3) (undo-tree-id40 . -3) 977 (974 . 977) (973 . 974) (#("	" 0 1 (fontified nil)) . 972) (undo-tree-id41 . -1) (971 . 974) (963 . 969) (#("_" 0 1 (face tree-sitter-hl-face:string fontified t)) . -963) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 964 (957 . 964) (956 . 958) (#("'" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -956) (956 . 957) (944 . 957) (942 . 944) (935 . 940) (#("n" 0 1 (face tree-sitter-hl-face:string fontified t)) . -935) (undo-tree-id44 . -1) (undo-tree-id45 . -1) 936 (933 . 936) (932 . 934) (#("'" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -932) (932 . 933) (922 . 933) (921 . 922) (#("	" 0 1 (fontified nil)) . 920) (undo-tree-id46 . -1) (919 . 922) (916 . 918) (#("-" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -916) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("-" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -917) (undo-tree-id49 . -1) 918 (912 . 918) (903 . 912) (#("screenM" 0 7 (fontified t)) . -903) (undo-tree-id50 . -7) (undo-tree-id51 . -7) 910 (909 . 910) (903 . 909) (#("sc" 0 2 (fontified t)) . -903) (undo-tree-id52 . -2) (undo-tree-id53 . -2) 905 (894 . 905) (887 . 890) (886 . 888) (#("\"" 0 1 (face (rainbow-delimiters-depth-6-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -886) (886 . 887) (882 . 887) (878 . 883) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -878) (undo-tree-id54 . -1) (undo-tree-id55 . -1) 879 (876 . 879) (871 . 876) (#("U" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -871) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 872 (871 . 872) (870 . 872) (#("." 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t)) . -870) (undo-tree-id58 . -1) 871 (870 . 871) (864 . 870) (#("Nu" 0 2 (face tree-sitter-hl-face:constructor fontified t)) . -864) (undo-tree-id59 . -2) (undo-tree-id60 . -2) 866 (864 . 866) (857 . 865) (853 . 857) (#("Ma" 0 2 (face tree-sitter-hl-face:constructor fontified t)) . -853) (undo-tree-id61 . -2) (undo-tree-id62 . -2) 855 (850 . 855) (845 . 850) (#("val" 0 3 (fontified t)) . -845) (undo-tree-id63 . -3) (undo-tree-id64 . -3) 848 (844 . 848) (838 . 844) (#("sc" 0 2 (fontified t)) . -838) (undo-tree-id65 . -2) (undo-tree-id66 . -2) 840 (836 . 840) (832 . 836) (#("thi" 0 3 (fontified t)) . -832) (undo-tree-id67 . -3) (undo-tree-id68 . -3) 835 (832 . 835) (831 . 832) (830 . 836) (828 . 831) (#(")" 0 1 (fontified nil)) . -827) (827 . 828) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -827) (827 . 828) (826 . 828) (818 . 826) (#("onC" 0 3 (fontified t)) . -818) (undo-tree-id69 . -3) (undo-tree-id70 . -3) 821 (817 . 821) (813 . 817) (#("    " 0 4 (fontified nil)) . 812) (undo-tree-id71 . -4) (811 . 817) (#("." 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t)) . -622) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -623) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (#("h" 0 1 (face tree-sitter-hl-face:property fontified t)) . -624) (undo-tree-id78 . -1) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -625) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property fontified t)) . -626) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) 627 (#("(" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -627) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 628) (undo-tree-id90 . -1) (#("() => {
	    this.#screen_value = percent
	    this.changed(\"screen_value\")
	}" 0 1 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified t) 1 2 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified t) 2 3 (fontified t) 3 5 (face tree-sitter-hl-face:operator fontified t) 5 6 (fontified t) 6 7 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified t) 7 8 (fontified t) 8 13 (fontified t) 13 17 (face tree-sitter-hl-face:variable.builtin fontified t) 17 18 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 18 19 (fontified t) 19 26 (fontified t) 26 32 (fontified t) 32 33 (face tree-sitter-hl-face:operator fontified t) 33 34 (fontified t) 34 42 (fontified t) 42 47 (fontified t) 47 51 (face tree-sitter-hl-face:variable.builtin fontified t) 51 52 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 52 59 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 59 60 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified t) 60 61 (face tree-sitter-hl-face:string fontified t) 61 68 (face tree-sitter-hl-face:string fontified t) 68 73 (face tree-sitter-hl-face:string fontified t) 73 74 (face tree-sitter-hl-face:string fontified t) 74 75 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified t) 75 76 (fontified t) 76 77 (fontified t) 77 78 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 628) (undo-tree-id91 . -78) (#(")" 0 1 (fontified nil)) . -889) (889 . 890) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -889) (889 . 890) (888 . 890) (880 . 888) (#("onC" 0 3 (fontified t)) . -880) (undo-tree-id92 . -3) (undo-tree-id93 . -3) 883 (882 . 883) (#("c" 0 1 (fontified t)) . -882) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 883 (880 . 883) (#("n" 0 1 (fontified t)) . -880) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 881 (874 . 881) (872 . 874) (#(")" 0 1 (fontified nil)) . -870) (870 . 871) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -870) (870 . 871) (869 . 871) (859 . 869) (855 . 859) (#("thi" 0 3 (fontified t)) . -855) (undo-tree-id98 . -3) (undo-tree-id99 . -3) 858 (851 . 858) (#(")" 0 1 (fontified nil)) . -850) (850 . 851) (#(")" 0 1 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -850) (850 . 851) (847 . 851) (837 . 847) (#("sc" 0 2 (fontified t)) . -837) (undo-tree-id100 . -2) (undo-tree-id101 . -2) 839 (837 . 839) (#("b" 0 1 (fontified t)) . -837) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("r" 0 1 (fontified t)) . -838) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (#("i" 0 1 (fontified t)) . -839) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("g" 0 1 (fontified t)) . -840) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("h" 0 1 (fontified t)) . -841) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("t" 0 1 (fontified t)) . -842) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("n" 0 1 (fontified t)) . -843) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("e" 0 1 (fontified t)) . -844) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("s" 0 1 (fontified t)) . -845) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("s" 0 1 (fontified t)) . -846) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("," 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t)) . -847) (undo-tree-id122 . -1) (#(" " 0 1 (fontified t)) . -848) (undo-tree-id123 . -1) 849 (847 . 849) (837 . 847) (#("br" 0 2 (fontified t)) . -837) (undo-tree-id124 . -2) (undo-tree-id125 . -2) 839 (837 . 839) (832 . 838) (825 . 832) (#("mon" 0 3 (face tree-sitter-hl-face:property fontified t)) . -825) (undo-tree-id126 . -3) (undo-tree-id127 . -3) 828 (824 . 828) (819 . 824) (#("Ut" 0 2 (face tree-sitter-hl-face:constructor fontified t)) . -819) (undo-tree-id128 . -2) (undo-tree-id129 . -2) 821 (820 . 821) (819 . 820) (817 . 819) (795 . 804) (#("inte" 0 4 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -795) (undo-tree-id130 . -4) (undo-tree-id131 . -4) 799 (789 . 799) (#("s" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -789) (undo-tree-id132 . -1) (#("c" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -790) (undo-tree-id133 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -791) (undo-tree-id134 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -792) (undo-tree-id135 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -793) (undo-tree-id136 . -1) (#("n" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -794) (undo-tree-id137 . -1) (#("_" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -795) (undo-tree-id138 . -1) (#("v" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified nil)) . -796) (undo-tree-id139 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -797) (undo-tree-id140 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -798) (undo-tree-id141 . -1) (#("u" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -799) (undo-tree-id142 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:embedded tree-sitter-hl-face:string) fontified t)) . -800) (undo-tree-id143 . -1) 801 (#("
" 0 1 (fontified t)) . -113) (undo-tree-id144 . -1) (undo-tree-id145 . -1) 114 (#("
" 0 1 (fontified t)) . -39) (undo-tree-id146 . -1) 40 (38 . 40) (239 . 244) (244 . 245) (241 . 244) (239 . 240) (#("
" 0 1 (rear-nonsticky t fontified t)) . -239) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("c" 0 1 (fontified t)) . -240) (undo-tree-id149 . -1) 241 (#("t" 0 1 (fontified t)) . 241) (#("s" 0 1 (fontified t)) . 241) (#("n" 0 1 (fontified t)) . 241) (#("o" 0 1 (fontified t)) . 241)) nil (26416 25512 924841 905000) 0 nil])
([nil nil ((1191 . 1192) 1150) nil (26416 25512 924697 820000) 0 nil])
([nil nil ((#("a" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . 297) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (t 26416 25512 927259 444000)) nil (26416 25876 528105 89000) 0 nil])
([nil nil ((#("w" 0 1 (fontified t)) . 297) (undo-tree-id12 . 1) (undo-tree-id13 . -1) (undo-tree-id14 . -1)) nil (26416 25876 528103 147000) 0 nil])
([nil nil ((#("a" 0 1 (fontified t)) . 297) (undo-tree-id9 . 1) (undo-tree-id10 . -1) (undo-tree-id11 . -1)) nil (26416 25876 528101 111000) 0 nil])
([nil nil ((#("i" 0 1 (fontified t)) . 297) (undo-tree-id6 . 1) (undo-tree-id7 . -1) (undo-tree-id8 . -1)) nil (26416 25876 528099 84000) 0 nil])
([nil nil ((#("t" 0 1 (fontified t)) . 297) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1)) nil (26416 25876 528095 294000) 0 nil])
([nil nil ((#(" " 0 1 (fontified t)) . 297) (undo-tree-id0 . 1) (undo-tree-id1 . -1) (undo-tree-id2 . -1)) nil (26416 25876 528089 137000) 0 nil])
([nil nil ((406 . 407) (#("get(\"get\") / (get(\"max\") || 1)" 0 3 (face tree-sitter-hl-face:function.call fontified t) 3 4 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 4 9 (face tree-sitter-hl-face:string fontified t) 9 10 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 10 13 (fontified t) 13 14 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t) 14 17 (face tree-sitter-hl-face:function.call fontified t) 17 18 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 18 23 (face tree-sitter-hl-face:string fontified t) 23 24 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t) 24 25 (fontified t) 25 27 (face tree-sitter-hl-face:operator fontified t) 27 28 (fontified t) 28 29 (face tree-sitter-hl-face:number fontified t) 29 30 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -406) (undo-tree-id17 . -30) 436 (308 . 309) (#("\"" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -308) (308 . 309) (#("`" 0 1 (face tree-sitter-hl-face:string fontified t)) . -308) (undo-tree-id18 . 1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) 309 (#("\"" 0 1 (face tree-sitter-hl-face:string fontified t)) . 355) (354 . 356) (#("\"" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -354) (354 . 355) (#("`" 0 1 (face tree-sitter-hl-face:string fontified t)) . 354) (undo-tree-id21 . -1) (353 . 354) (309 . 316) (347 . 348) (#(")" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -347) (347 . 348) (#(")" 0 1 (face (rainbow-delimiters-depth-2-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 308) (302 . 309) (297 . 302) (#("U" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) fontified t)) . -297) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 298 (297 . 298) (#("b" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -297) (undo-tree-id24 . -1) (undo-tree-id25 . 1) (undo-tree-id26 . -1) (#("a" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -298) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (#("s" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -299) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (#("h" 0 1 (face tree-sitter-hl-face:function.call fontified t)) . -300) (undo-tree-id31 . -1) 301 (t 26416 25876 535277 198000)) nil (26416 26011 400270 893000) 0 nil])
([nil nil ((#("Number(Utils.exec(" 0 6 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:function.call) fontified t) 6 7 (face (rainbow-delimiters-depth-4-face tree-sitter-hl-face:punctuation.bracket) fontified t) 7 12 (face tree-sitter-hl-face:constructor fontified t) 12 13 (face tree-sitter-hl-face:punctuation.delimiter fontified t) 13 17 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t) 17 18 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 880) (undo-tree-id34 . -17) (undo-tree-id35 . -17) (undo-tree-id36 . -17) (undo-tree-id37 . -17) 897 (t 26416 26011 403283 784000)) nil (26416 26139 250551 263000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 891)) nil (26416 26139 250548 944000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-mismatched-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 915)) nil (26416 26139 250548 301000) 0 nil])
([nil nil ((#(")" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 890) (undo-tree-id32 . -1) (undo-tree-id33 . -1)) nil (26416 26139 250546 958000) 0 nil])
([nil current ((914 . 915) (#(")" 0 1 (face tree-sitter-hl-face:number fontified nil)) . -914) (914 . 915)) nil (26416 26139 250535 247000) 0 nil])
nil
