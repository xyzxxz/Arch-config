(undo-tree-save-format-version . 1)
"701524f543e17108dbc502b4ff71d77d7c3b2c23"
[nil nil nil nil (26414 49329 168359 720000) 0 nil]
([nil nil ((25 . 29) (24 . 26) (19 . 25) (#(")" 0 1 (fontified nil)) . -18) (18 . 19) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -18) (18 . 19) (16 . 19) (9 . 16) (#("defa" 0 4 (fontified t)) . -9) (undo-tree-id0 . -4) (undo-tree-id1 . -4) 13 (2 . 13) (1 . 2) (t . -1)) nil (26414 49329 168357 210000) 0 nil])
([nil nil ((31 . 32) 28) nil (26414 49329 168339 570000) 0 nil])
([nil nil ((143 . 144) (141 . 142) (139 . 142) (138 . 140) (#("`" 0 1 (fontified nil)) . -138) (138 . 139) (#("v" 0 1 (fontified t)) . -138) (undo-tree-id0 . -1) (undo-tree-id1 . -1) 139 (133 . 139) (129 . 134) (#("a" 0 1 (face tree-sitter-hl-face:string fontified t)) . -127) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("g" 0 1 (face tree-sitter-hl-face:string fontified t)) . -128) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("e" 0 1 (face tree-sitter-hl-face:string fontified t)) . -129) (undo-tree-id6 . -1) (undo-tree-id7 . -1) 130 (120 . 130) (#("per" 0 3 (face tree-sitter-hl-face:string fontified t)) . -120) (undo-tree-id8 . -3) (undo-tree-id9 . -3) 123 (120 . 123) (119 . 121) (#("\"" 0 1 (face (rainbow-delimiters-depth-6-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -119) (119 . 120) (#(")" 0 1 (fontified nil)) . -119) (119 . 120) (#(")" 0 1 (face (rainbow-delimiters-depth-6-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -119) (119 . 120) (113 . 120) (106 . 113) (#("batte" 0 5 (fontified t)) . -106) (undo-tree-id10 . -5) (undo-tree-id11 . -5) 111 (110 . 111) (#("r" 0 1 (fontified t)) . -110) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("
" 0 1 (fontified t)) . -111) (undo-tree-id14 . -1) (#("	" 0 1 (fontified t)) . -112) (undo-tree-id15 . -1) (#(" " 0 1 (fontified t)) . -113) (undo-tree-id16 . -1) (#(" " 0 1 (fontified t)) . -114) (undo-tree-id17 . -1) (#(" " 0 1 (fontified t)) . -115) (undo-tree-id18 . -1) (#(" " 0 1 (fontified t)) . -116) (undo-tree-id19 . -1) 117 (111 . 117) (108 . 111) (104 . 108) (99 . 104) (#("la" 0 2 (face tree-sitter-hl-face:property.definition fontified t)) . -99) (undo-tree-id20 . -2) (undo-tree-id21 . -2) 101 (99 . 101) (94 . 99) (93 . 96) (92 . 94) (91 . 93) (86 . 91) (#("La" 0 2 (face tree-sitter-hl-face:property fontified t)) . -86) (undo-tree-id22 . -2) (undo-tree-id23 . -2) 88 (85 . 88) (79 . 85) (#("Wi" 0 2 (face tree-sitter-hl-face:constructor fontified t)) . -79) (undo-tree-id24 . -2) (undo-tree-id25 . -2) 81 (79 . 81) (77 . 79) (76 . 77) (67 . 72) (66 . 69) (65 . 67) (59 . 66) (53 . 59) (#("Wid" 0 3 (face tree-sitter-hl-face:constructor fontified t)) . -53) (undo-tree-id26 . -3) (undo-tree-id27 . -3) 56 (54 . 56) (#("I" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -54) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("d" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -55) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("g" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -56) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("e" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -57) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("t" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -58) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 59 (53 . 59) (#("WI" 0 2 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -53) (undo-tree-id38 . -2) (undo-tree-id39 . -2) 55 (53 . 55) (52 . 53) (51 . 57) (48 . 52) (40 . 48) (#("childr" 0 6 (face tree-sitter-hl-face:property.definition fontified t)) . -40) (undo-tree-id40 . -6) (undo-tree-id41 . -6) 46 (45 . 46) (#("d" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -45) (undo-tree-id42 . -1) 46 (45 . 46) (40 . 45) (#("chil" 0 4 (face tree-sitter-hl-face:property.definition fontified t)) . -40) (undo-tree-id43 . -4) (undo-tree-id44 . -4) 44 (40 . 44) (30 . 33) (#("O" 0 1 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t)) . -30) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (#("v" 0 1 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t)) . -31) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("e" 0 1 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t)) . -32) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (#("r" 0 1 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t)) . -33) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (#("l" 0 1 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t)) . -34) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("a" 0 1 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t)) . -35) (undo-tree-id55 . -1) (#("y" 0 1 (face (tree-sitter-hl-face:method.call tree-sitter-hl-face:property) fontified t)) . -36) (undo-tree-id56 . -1) 37 (40 . 44) (39 . 41) (38 . 40) (37 . 39) (29 . 37) (23 . 29) (#("Wid" 0 3 (face tree-sitter-hl-face:constructor fontified t)) . -23) (undo-tree-id57 . -3) (undo-tree-id58 . -3) 26 (23 . 26) (#("W" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -23) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("a" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -24) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -25) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (#("l" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -26) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (#("p" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -27) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("a" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -28) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("p" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -29) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("e" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -30) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("r" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -31) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 32 (23 . 32) (#("W" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -23) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 24 (23 . 24) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -23) (undo-tree-id79 . -1) (#("
" 0 1 (fontified t)) . -24) (undo-tree-id80 . -1) (#(" " 0 1 (fontified t)) . -25) (undo-tree-id81 . -1) (#(" " 0 1 (fontified t)) . -26) (undo-tree-id82 . -1) (#(" " 0 1 (fontified t)) . -27) (undo-tree-id83 . -1) (#(" " 0 1 (fontified t)) . -28) (undo-tree-id84 . -1) (#("
" 0 1 (fontified t)) . -29) (undo-tree-id85 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -30) (undo-tree-id86 . -1) 31 (t 26414 49329 169140 536000)) nil (26414 51147 240550 460000) 0 nil])
([nil current ((39 . 46) (#("ba" 0 2 (face tree-sitter-hl-face:string fontified t)) . -39) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -2) (undo-tree-id120 . -2) (undo-tree-id121 . -2) (undo-tree-id122 . -2) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -2) (undo-tree-id127 . -2) (undo-tree-id128 . -2) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (undo-tree-id131 . -2) (undo-tree-id132 . -2) (undo-tree-id133 . -2) (undo-tree-id134 . -2) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -2) (undo-tree-id138 . -2) 41 (39 . 41) (#("d" 0 1 (face tree-sitter-hl-face:string fontified t)) . -39) (undo-tree-id139 . -1) (undo-tree-id140 . -1) 40 (39 . 40) (apply yas--snippet-revive 31 41 #s(yas--snippet nil (#s(yas--field 1 36 41 nil nil nil t #s(yas--exit 41 nil)) #s(yas--field 2 36 36 nil nil nil nil #s(yas--field 3 36 36 nil nil nil nil #s(yas--field 1 36 41 nil nil nil t #s(yas--exit 41 nil)))) #s(yas--field 3 36 36 nil nil nil nil #s(yas--field 1 36 41 nil nil nil t #s(yas--exit 41 nil)))) #s(yas--exit 41 nil) 3 nil #s(yas--field 1 36 41 nil nil nil t #s(yas--exit 41 nil)) nil nil)) (38 . 40) (#("\"" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -38) (38 . 39) (36 . 39) (#("t" 0 1 (face tree-sitter-hl-face:property fontified t)) . -36) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (#(" " 0 1 (fontified t)) . -37) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -38) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (#(" " 0 1 (fontified t)) . -39) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (#("o" 0 1 (fontified t)) . -40) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (#("r" 0 1 (fontified t)) . -41) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (#("i" 0 1 (fontified t)) . -42) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (#("g" 0 1 (fontified t)) . -43) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("i" 0 1 (fontified t)) . -44) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("n" 0 1 (fontified t)) . -45) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("a" 0 1 (fontified t)) . -46) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("l" 0 1 (fontified t)) . -47) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (#("N" 0 1 (fontified t)) . -48) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (#("a" 0 1 (fontified t)) . -49) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (#("m" 0 1 (fontified t)) . -50) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (#("e" 0 1 (fontified t)) . -51) (undo-tree-id171 . -1) (undo-tree-id172 . -1) 52 (#(" " 0 1 (fontified t)) . -52) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("a" 0 1 (fontified t)) . -53) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("s" 0 1 (face tree-sitter-hl-face:keyword fontified t)) . -54) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (#(" " 0 1 (fontified t)) . -55) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -56) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("l" 0 1 (face tree-sitter-hl-face:type fontified t)) . -57) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("i" 0 1 (face tree-sitter-hl-face:type fontified t)) . -58) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (#("a" 0 1 (face tree-sitter-hl-face:type fontified t)) . -59) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("s" 0 1 (face tree-sitter-hl-face:type fontified t)) . -60) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#(" " 0 1 (fontified t)) . -61) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -62) (undo-tree-id193 . -1) (undo-tree-id194 . -1) (#(" " 0 1 (fontified t)) . -63) (undo-tree-id195 . -1) (undo-tree-id196 . -1) (#("f" 0 1 (fontified t)) . -64) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (#("r" 0 1 (fontified t)) . -65) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (#("o" 0 1 (fontified t)) . -66) (undo-tree-id201 . -1) (undo-tree-id202 . -1) (#("m" 0 1 (fontified t)) . -67) (undo-tree-id203 . -1) (undo-tree-id204 . -1) (#(" " 0 1 (fontified t)) . -68) (undo-tree-id205 . -1) (undo-tree-id206 . -1) 69 (#("'" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -69) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("'" 0 1 (face tree-sitter-hl-face:string fontified t)) . 70) (undo-tree-id209 . -1) (#("(" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -70) (undo-tree-id210 . -1) (#(")" 0 1 (face tree-sitter-hl-face:string fontified t)) . 71) (71 . 72) (#("module" 0 6 (face tree-sitter-hl-face:string fontified nil)) . 71) (70 . 71) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 36 41 nil nil nil t #s(yas--exit 41 nil)) #s(yas--field 2 36 36 nil nil nil nil #s(yas--field 3 36 36 nil nil nil nil #s(yas--field 1 36 41 nil nil nil t #s(yas--exit 41 nil)))) #s(yas--field 3 36 36 nil nil nil nil #s(yas--field 1 36 41 nil nil nil t #s(yas--exit 41 nil)))) #s(yas--exit 41 nil) 3 nil #s(yas--field 1 36 41 nil nil nil t #s(yas--exit 41 nil)) nil nil)) (31 . 77) (#("ima" 0 3 (fontified nil)) . 31) (undo-tree-id211 . -3) (31 . 34) (#("im" 0 2 (face tree-sitter-hl-face:property fontified t)) . -31) (undo-tree-id212 . -2) (undo-tree-id213 . -2) 33 (30 . 33) (23 . 30) (#("Ser" 0 3 (face tree-sitter-hl-face:constructor fontified t)) . -23) (undo-tree-id214 . -3) (undo-tree-id215 . -3) 26 (24 . 26) (#("r" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -24) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (#("e" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -25) (undo-tree-id218 . -1) (#("
" 0 1 (fontified t)) . -26) (undo-tree-id219 . -1) 27 (26 . 27) (22 . 26) (17 . 22) (#("awa" 0 3 (fontified t)) . -17) (undo-tree-id220 . -3) (undo-tree-id221 . -3) 20 (14 . 20) (7 . 14) (#("ba" 0 2 (face tree-sitter-hl-face:variable fontified t)) . -7) (undo-tree-id222 . -2) (undo-tree-id223 . -2) 9 (6 . 9) (3 . 6) (#("s" 0 1 (fontified t)) . -3) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (#("n" 0 1 (fontified t)) . -4) (undo-tree-id226 . -1) (#("t" 0 1 (fontified t)) . -5) (undo-tree-id227 . -1) (#(" " 0 1 (fontified t)) . -6) (undo-tree-id228 . -1) 7 (1 . 7) (1 . 2) (t 26414 51147 244229 309000)) nil (26414 51198 472237 714000) 0 nil])
nil
