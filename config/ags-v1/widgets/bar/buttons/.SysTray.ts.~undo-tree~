(undo-tree-save-format-version . 1)
"5f103a2c4700f85a8a685d8901d1dd1192b3fb99"
[nil nil nil nil (26414 49398 661059 89000) 0 nil]
([nil nil ((26 . 30) (25 . 27) (20 . 26) (#(" " 0 1 (fontified t)) . -20) (undo-tree-id0 . -1) 21 (#("+" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -21) (undo-tree-id1 . -1) 22 (20 . 22) (#(")" 0 1 (fontified nil)) . -19) (19 . 20) (#(")" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -19) (19 . 20) (17 . 20) (10 . 17) (#("defa" 0 4 (fontified t)) . -10) (undo-tree-id2 . -4) (undo-tree-id3 . -4) 14 (9 . 14) (3 . 9) (#("expor" 0 5 (fontified t)) . -3) (undo-tree-id4 . -5) (undo-tree-id5 . -5) 8 (3 . 8) (1 . 3) (#("e" 0 1 (fontified t)) . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("x" 0 1 (fontified t)) . -2) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 3 (1 . 3) (t . -1)) nil (26414 49398 661054 739000) 0 nil])
([nil nil ((32 . 33) 29) nil (26414 49398 661019 510000) 0 nil])
([nil nil ((43 . 53) (#("sys" 0 3 (face tree-sitter-hl-face:string fontified t)) . -43) (undo-tree-id0 . -3) (undo-tree-id1 . -3) 46 (43 . 46) (apply yas--snippet-revive 35 45 #s(yas--snippet nil (#s(yas--field 1 41 45 nil nil nil t #s(yas--exit 45 nil)) #s(yas--field 2 41 41 nil nil nil nil #s(yas--field 1 41 45 nil nil nil t #s(yas--exit 45 nil)))) #s(yas--exit 45 nil) 2 nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--field 1 41 45 nil nil nil t #s(yas--exit 45 nil))) nil nil)) (42 . 44) (#("\"" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -42) (42 . 43) (41 . 43) (#(" " 0 1 (fontified t)) . -41) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -42) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -43) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property fontified t)) . -44) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (#("u" 0 1 (face tree-sitter-hl-face:property fontified t)) . -45) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property fontified t)) . -46) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -47) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("N" 0 1 (face tree-sitter-hl-face:property fontified t)) . -48) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -49) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -50) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property fontified t)) . -51) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#(" " 0 1 (fontified t)) . -52) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (#("f" 0 1 (fontified t)) . -53) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("r" 0 1 (fontified t)) . -54) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (#("o" 0 1 (fontified t)) . -55) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (#("m" 0 1 (face tree-sitter-hl-face:keyword fontified nil)) . -56) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#(" " 0 1 (fontified t)) . -57) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 58 (#("'" 0 1 (face tree-sitter-hl-face:string fontified nil)) . -58) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (#("'" 0 1 (face tree-sitter-hl-face:string fontified t)) . 59) (undo-tree-id38 . -1) (#("module" 0 6 (face tree-sitter-hl-face:string fontified t)) . 59) (apply yas--take-care-of-redo #s(yas--snippet nil (#s(yas--field 1 41 45 nil nil nil t #s(yas--exit 45 nil)) #s(yas--field 2 41 41 nil nil nil nil #s(yas--field 1 41 45 nil nil nil t #s(yas--exit 45 nil)))) #s(yas--exit 45 nil) 2 nil #s(yas--field 2 41 41 nil nil nil nil #s(yas--field 1 41 45 nil nil nil t #s(yas--exit 45 nil))) nil nil)) (35 . 66) (#("imp" 0 3 (face tree-sitter-hl-face:property fontified t)) . 35) (undo-tree-id39 . -3) (undo-tree-id40 . -3) 38 (34 . 38) (27 . 34) (#("Ser" 0 3 (face tree-sitter-hl-face:constructor fontified t)) . -27) (undo-tree-id41 . -3) (undo-tree-id42 . -3) 30 (27 . 30) (#("a" 0 1 (fontified t)) . -27) (undo-tree-id43 . -1) (undo-tree-id44 . -1) 28 (26 . 28) (21 . 26) (#("aw" 0 2 (fontified t)) . -21) (undo-tree-id45 . -2) (undo-tree-id46 . -2) 23 (14 . 23) (8 . 14) (#("sys" 0 3 (face tree-sitter-hl-face:variable fontified t)) . -8) (undo-tree-id47 . -3) (undo-tree-id48 . -3) 11 (2 . 11) (1 . 2) (72 . 76) (66 . 72) (#("P" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -66) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 67 (66 . 67) (60 . 67) (#("h" 0 1 (fontified t)) . -60) (undo-tree-id51 . -1) (#("o" 0 1 (fontified t)) . -61) (undo-tree-id52 . -1) 62 (60 . 62) (#("." 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t)) . -60) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("b" 0 1 (face tree-sitter-hl-face:property fontified t)) . -61) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -62) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (#("o" 0 1 (face tree-sitter-hl-face:property fontified t)) . -63) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (#("k" 0 1 (face tree-sitter-hl-face:property fontified t)) . -64) (undo-tree-id61 . -1) 65 (60 . 65) (56 . 60) (#("sel" 0 3 (fontified t)) . -56) (undo-tree-id62 . -3) (undo-tree-id63 . -3) 59 (56 . 59) (#("(" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -56) (undo-tree-id64 . -1) (#(")" 0 1 (face (rainbow-delimiters-depth-3-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . 57) (52 . 58) (#("=" 0 1 (face tree-sitter-hl-face:operator fontified t)) . -52) (undo-tree-id65 . -1) (#(" " 0 1 (fontified t)) . -53) (undo-tree-id66 . -1) 54 (41 . 54) (#("c" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -41) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (#("h" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -42) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("i" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -43) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("l" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -44) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (#("d" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -45) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (#("r" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -46) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#("e" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -47) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#("n" 0 1 (face tree-sitter-hl-face:property.definition fontified t)) . -48) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#(":" 0 1 (fontified t)) . -49) (undo-tree-id83 . -1) (#(" " 0 1 (fontified t)) . -50) (undo-tree-id84 . -1) 51 (49 . 51) (41 . 49) (#("childr" 0 6 (face tree-sitter-hl-face:property.definition fontified t)) . -41) (undo-tree-id85 . -6) (undo-tree-id86 . -6) 47 (41 . 47) (37 . 41) (36 . 38) (35 . 37) (30 . 36) (24 . 30) (#("Wid" 0 3 (face tree-sitter-hl-face:constructor fontified t)) . -24) (undo-tree-id87 . -3) (undo-tree-id88 . -3) 27 (24 . 27) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -24) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("
" 0 1 (fontified t)) . -25) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (#(" " 0 1 (fontified t)) . -26) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#(" " 0 1 (fontified t)) . -27) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (#(" " 0 1 (fontified t)) . -28) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#(" " 0 1 (fontified t)) . -29) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1) (#("
" 0 1 (fontified t)) . -30) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -31) (undo-tree-id110 . -1) (undo-tree-id111 . -1) 32 (t 26414 49398 663143 929000)) nil (26414 49757 945363 175000) 0 nil])
([nil nil ((#("
" 0 1 (face tree-sitter-hl-face:string fontified t)) . -70) (undo-tree-id171 . -1) 71 (70 . 71) (63 . 70) (62 . 63) (61 . 63) (#("\"" 0 1 (fontified nil)) . -61) (57 . 62) (#("o" 0 1 (fontified t)) . -57) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (#("m" 0 1 (fontified t)) . -58) (undo-tree-id174 . -1) (undo-tree-id175 . -1) 59 (53 . 59) (#("D" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -53) (undo-tree-id176 . -1) (undo-tree-id177 . -1) (#("K" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -54) (undo-tree-id178 . -1) 55 (45 . 55) (44 . 45) (29 . 43) (26 . 29) (25 . 27) (#("\"" 0 1 (fontified nil)) . -25) (19 . 26) (8 . 19) (#("PanelB" 0 6 (face tree-sitter-hl-face:constructor fontified t)) . -8) (undo-tree-id179 . -6) (undo-tree-id180 . -6) 14 (1 . 14) (216 . 218) (200 . 217) (189 . 200) (185 . 187) (184 . 186) (183 . 185) (192 . 200) (#("t" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -192) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("e" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -193) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#("m" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -194) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 195 (189 . 195) (188 . 190) (184 . 188) (#(")" 0 1 (fontified nil)) . -183) (183 . 184) (#(")" 0 1 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -183) (183 . 184) (176 . 184) (#("m" 0 1 (face tree-sitter-hl-face:property fontified t)) . -176) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (#("a" 0 1 (face tree-sitter-hl-face:property fontified t)) . -177) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (#("p" 0 1 (face tree-sitter-hl-face:property fontified t)) . -178) (undo-tree-id191 . -1) (undo-tree-id192 . -1) 179 (170 . 179) (169 . 170) (159 . 169) (#("sys" 0 3 (fontified t)) . -159) (undo-tree-id193 . -3) (undo-tree-id194 . -3) 162 (156 . 162) (148 . 156) (#("childr" 0 6 (face tree-sitter-hl-face:property fontified t)) . -148) (undo-tree-id195 . -6) (undo-tree-id196 . -6) 154 (146 . 154) (#("." 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t)) . -146) (undo-tree-id197 . -1) (undo-tree-id198 . -1) 147 (143 . 147) (142 . 143) (141 . 147) (138 . 142) (130 . 138) (t 26414 49757 947161 472000)) nil (26414 49984 72007 14000) 0 nil])
([nil nil ((240 . 244) (239 . 241) (238 . 240) (237 . 239) (226 . 237) (#("PanelB" 0 6 (face tree-sitter-hl-face:constructor fontified t)) . -226) (undo-tree-id112 . -6) (undo-tree-id113 . -6) 232 (231 . 232) (#("b" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -231) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (#("u" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -232) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (#("t" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -233) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (#("t" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -234) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (#("o" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -235) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("n" 0 1 (face tree-sitter-hl-face:constructor fontified t)) . -236) (undo-tree-id124 . -1) (undo-tree-id125 . -1) 237 (226 . 237) (#("P" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -226) (undo-tree-id126 . -1) (undo-tree-id127 . -1) 227 (226 . 227) (#("{" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -226) (undo-tree-id128 . -1) (#("
" 0 1 (fontified t)) . -227) (undo-tree-id129 . -1) (#(" " 0 1 (fontified t)) . -228) (undo-tree-id130 . -1) (#(" " 0 1 (fontified t)) . -229) (undo-tree-id131 . -1) (#(" " 0 1 (fontified t)) . -230) (undo-tree-id132 . -1) (#(" " 0 1 (fontified t)) . -231) (undo-tree-id133 . -1) (#("
" 0 1 (fontified t)) . -232) (undo-tree-id134 . -1) (#("}" 0 1 (face (rainbow-delimiters-depth-1-face tree-sitter-hl-face:punctuation.bracket) fontified t)) . -233) (undo-tree-id135 . -1) 234 (228 . 232) (227 . 229) (222 . 228) (217 . 221) (213 . 218) (202 . 213) (#("SysTrayI" 0 8 (face (tree-sitter-hl-face:constructor tree-sitter-hl-face:variable) fontified t)) . -202) (undo-tree-id136 . -8) (undo-tree-id137 . -8) 210 (209 . 210) (196 . 209) (194 . 197) (182 . 194) (175 . 182) (#("opt" 0 3 (fontified t)) . -175) (undo-tree-id138 . -3) (undo-tree-id139 . -3) 178 (175 . 178) (172 . 175) (163 . 171) (162 . 164) (#("i" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -162) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (#("g" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -163) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("n" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -164) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("o" 0 1 (face tree-sitter-hl-face:variable fontified t)) . -165) (undo-tree-id146 . -1) (undo-tree-id147 . -1) 166 (158 . 166) (#("s" 0 1 (fontified t)) . -158) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("n" 0 1 (fontified t)) . -159) (undo-tree-id150 . -1) 160 (157 . 160) (156 . 157) (66 . 73) (#("op" 0 2 (face tree-sitter-hl-face:string fontified t)) . -66) (undo-tree-id151 . -2) (undo-tree-id152 . -2) 68 (66 . 68) (65 . 67) (#("\"" 0 1 (fontified nil)) . -65) (58 . 66) (52 . 58) (#("opt" 0 3 (fontified t)) . -52) (undo-tree-id153 . -3) (undo-tree-id154 . -3) 55 (54 . 55) (#("a" 0 1 (fontified t)) . -54) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (#("c" 0 1 (fontified t)) . -55) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("i" 0 1 (fontified t)) . -56) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (#("t" 0 1 (fontified t)) . -57) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#("y" 0 1 (fontified t)) . -58) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 59 (52 . 59) (#("op" 0 2 (fontified t)) . -52) (undo-tree-id165 . -2) (undo-tree-id166 . -2) 54 (52 . 54) (#("p" 0 1 (fontified t)) . -52) (undo-tree-id167 . -1) (undo-tree-id168 . -1) 53 (51 . 53) (45 . 51) (#("im" 0 2 (fontified t)) . -45) (undo-tree-id169 . -2) (undo-tree-id170 . -2) 47 (45 . 47) (44 . 45) 25) nil (26414 49984 71982 337000) 0 nil])
([nil nil ((288 . 289) (285 . 286) (282 . 285) (281 . 283) (#("\"" 0 1 (face (rainbow-delimiters-depth-5-face tree-sitter-hl-face:punctuation.bracket) fontified nil)) . -281) (281 . 282) (264 . 282) (263 . 265) (257 . 264) (251 . 257) (#("W" 0 1 (face (tree-sitter-hl-face:constant tree-sitter-hl-face:constructor) fontified t)) . -251) (undo-tree-id199 . -1) (undo-tree-id200 . -1) 252 (244 . 252) (t 26414 49984 73172 514000)) nil (26414 50024 899698 396000) 0 nil])
([nil nil ((456 . 468) (449 . 456) (#("Gr" 0 2 (face tree-sitter-hl-face:property fontified t)) . -449) (undo-tree-id201 . -2) (undo-tree-id202 . -2) 451 (445 . 451) (441 . 445) (#("A" 0 1 (face tree-sitter-hl-face:property fontified t)) . -441) (undo-tree-id203 . -1) 442 (432 . 442) (430 . 432) (#("r" 0 1 (face tree-sitter-hl-face:property fontified t)) . -430) (undo-tree-id204 . -1) (#("y" 0 1 (face tree-sitter-hl-face:property fontified t)) . -431) (undo-tree-id205 . -1) 432 (421 . 432) (419 . 421) (#("." 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t)) . -419) (undo-tree-id206 . -1) (#(" " 0 1 (fontified t)) . -420) (undo-tree-id207 . -1) 421 (416 . 421) (415 . 417) (409 . 415) (#("wid" 0 3 (face tree-sitter-hl-face:property fontified t)) . -409) (undo-tree-id208 . -3) (undo-tree-id209 . -3) 412 (405 . 412) (394 . 405) (390 . 394) (#("it" 0 2 (fontified t)) . -390) (undo-tree-id210 . -2) (undo-tree-id211 . -2) 392 (388 . 392) (386 . 388) (375 . 385) (372 . 376) (367 . 372) (#("cli" 0 3 (face tree-sitter-hl-face:property.definition fontified t)) . -367) (undo-tree-id212 . -3) (undo-tree-id213 . -3) 370 (366 . 370) (357 . 366) (#("sec" 0 3 (face tree-sitter-hl-face:property.definition fontified t)) . -357) (undo-tree-id214 . -3) (undo-tree-id215 . -3) 360 (354 . 360) (349 . 354) (348 . 349) (342 . 347) (#("ev" 0 2 (fontified t)) . -342) (undo-tree-id216 . -2) (undo-tree-id217 . -2) 344 (342 . 344) (341 . 343) (330 . 341) (#("m" 0 1 (fontified t)) . -330) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (#("e" 0 1 (fontified t)) . -331) (undo-tree-id220 . -1) (#("." 0 1 (face tree-sitter-hl-face:punctuation.delimiter fontified t)) . -332) (undo-tree-id221 . -1) 333 (329 . 333) (324 . 329) (315 . 323) (314 . 316) (306 . 314) (299 . 306) (#("pri" 0 3 (fontified t)) . -299) (undo-tree-id222 . -3) (undo-tree-id223 . -3) 302 (296 . 302) (291 . 296) (t 26414 50024 903174 507000) 288) nil (26414 50207 786771 835000) 0 nil])
([nil current ((291 . 292) (t 26414 50207 789183 437000)) nil (26414 50218 315294 70000) 0 nil])
nil
